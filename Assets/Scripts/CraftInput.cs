//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/CraftInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CraftInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CraftInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CraftInput"",
    ""maps"": [
        {
            ""name"": ""Aircraft"",
            ""id"": ""b3077e71-acf4-42d9-b346-c7f00298f859"",
            ""actions"": [
                {
                    ""name"": ""Throttle"",
                    ""type"": ""Value"",
                    ""id"": ""260c1bfa-6326-44f3-8af1-e3a3a22ef24d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pitch"",
                    ""type"": ""Value"",
                    ""id"": ""149157bb-1fbc-44ab-b60f-031d5f027889"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Value"",
                    ""id"": ""1c4d3ce0-6878-4937-9e1a-3e8a24dd5230"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Yaw"",
                    ""type"": ""Value"",
                    ""id"": ""902009d9-c394-4f2e-98e5-d5bb3cbbdae7"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Camera"",
                    ""type"": ""Value"",
                    ""id"": ""8b6c6dcb-00b8-4aa2-b3bb-27619c5c8142"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""FireCannon"",
                    ""type"": ""Button"",
                    ""id"": ""329ca77a-0556-4251-b1ac-e454000bf657"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FireMissile"",
                    ""type"": ""Button"",
                    ""id"": ""9300e16d-235b-488b-bb25-d84d732a0522"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""b3f27a61-d105-482b-9e3f-5d5a9eb991f9"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throttle"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""1ed3354f-6460-4887-8114-7bed26767ccc"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throttle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""52102740-8c01-459d-8c02-0953b107b12f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throttle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""a0a7eff2-596f-46fe-b97d-69bcd9d7d309"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pitch"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""2abd8bf8-44cc-43c9-8709-14103647788b"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""9ef38f4c-80c2-4084-a3da-2ea62ea548cb"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""4f4fc82c-d1a0-4449-8bbe-78f6a3caf1be"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""4a95526e-5422-48bd-8006-2fcd54e867da"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""c830fd4d-81af-4a85-8e6d-b6ea642c8d50"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""570e3385-9938-43fa-87d6-0d0e388b5afe"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yaw"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b6c25ea7-e3aa-46db-962e-b542b822e326"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""42304636-d49c-4384-bc87-0a4a42f22f21"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""712ff56f-ca96-4a18-8e08-6f07355a6761"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8122d03e-e52d-49e3-9e9f-16db73380aee"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4e35106e-8294-4e65-93c7-65953ccb67e0"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FireCannon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d882def0-cc79-40f5-9789-268a4740d8f6"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FireMissile"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Aircraft
        m_Aircraft = asset.FindActionMap("Aircraft", throwIfNotFound: true);
        m_Aircraft_Throttle = m_Aircraft.FindAction("Throttle", throwIfNotFound: true);
        m_Aircraft_Pitch = m_Aircraft.FindAction("Pitch", throwIfNotFound: true);
        m_Aircraft_Roll = m_Aircraft.FindAction("Roll", throwIfNotFound: true);
        m_Aircraft_Yaw = m_Aircraft.FindAction("Yaw", throwIfNotFound: true);
        m_Aircraft_Camera = m_Aircraft.FindAction("Camera", throwIfNotFound: true);
        m_Aircraft_FireCannon = m_Aircraft.FindAction("FireCannon", throwIfNotFound: true);
        m_Aircraft_FireMissile = m_Aircraft.FindAction("FireMissile", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Aircraft
    private readonly InputActionMap m_Aircraft;
    private List<IAircraftActions> m_AircraftActionsCallbackInterfaces = new List<IAircraftActions>();
    private readonly InputAction m_Aircraft_Throttle;
    private readonly InputAction m_Aircraft_Pitch;
    private readonly InputAction m_Aircraft_Roll;
    private readonly InputAction m_Aircraft_Yaw;
    private readonly InputAction m_Aircraft_Camera;
    private readonly InputAction m_Aircraft_FireCannon;
    private readonly InputAction m_Aircraft_FireMissile;
    public struct AircraftActions
    {
        private @CraftInput m_Wrapper;
        public AircraftActions(@CraftInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Throttle => m_Wrapper.m_Aircraft_Throttle;
        public InputAction @Pitch => m_Wrapper.m_Aircraft_Pitch;
        public InputAction @Roll => m_Wrapper.m_Aircraft_Roll;
        public InputAction @Yaw => m_Wrapper.m_Aircraft_Yaw;
        public InputAction @Camera => m_Wrapper.m_Aircraft_Camera;
        public InputAction @FireCannon => m_Wrapper.m_Aircraft_FireCannon;
        public InputAction @FireMissile => m_Wrapper.m_Aircraft_FireMissile;
        public InputActionMap Get() { return m_Wrapper.m_Aircraft; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AircraftActions set) { return set.Get(); }
        public void AddCallbacks(IAircraftActions instance)
        {
            if (instance == null || m_Wrapper.m_AircraftActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AircraftActionsCallbackInterfaces.Add(instance);
            @Throttle.started += instance.OnThrottle;
            @Throttle.performed += instance.OnThrottle;
            @Throttle.canceled += instance.OnThrottle;
            @Pitch.started += instance.OnPitch;
            @Pitch.performed += instance.OnPitch;
            @Pitch.canceled += instance.OnPitch;
            @Roll.started += instance.OnRoll;
            @Roll.performed += instance.OnRoll;
            @Roll.canceled += instance.OnRoll;
            @Yaw.started += instance.OnYaw;
            @Yaw.performed += instance.OnYaw;
            @Yaw.canceled += instance.OnYaw;
            @Camera.started += instance.OnCamera;
            @Camera.performed += instance.OnCamera;
            @Camera.canceled += instance.OnCamera;
            @FireCannon.started += instance.OnFireCannon;
            @FireCannon.performed += instance.OnFireCannon;
            @FireCannon.canceled += instance.OnFireCannon;
            @FireMissile.started += instance.OnFireMissile;
            @FireMissile.performed += instance.OnFireMissile;
            @FireMissile.canceled += instance.OnFireMissile;
        }

        private void UnregisterCallbacks(IAircraftActions instance)
        {
            @Throttle.started -= instance.OnThrottle;
            @Throttle.performed -= instance.OnThrottle;
            @Throttle.canceled -= instance.OnThrottle;
            @Pitch.started -= instance.OnPitch;
            @Pitch.performed -= instance.OnPitch;
            @Pitch.canceled -= instance.OnPitch;
            @Roll.started -= instance.OnRoll;
            @Roll.performed -= instance.OnRoll;
            @Roll.canceled -= instance.OnRoll;
            @Yaw.started -= instance.OnYaw;
            @Yaw.performed -= instance.OnYaw;
            @Yaw.canceled -= instance.OnYaw;
            @Camera.started -= instance.OnCamera;
            @Camera.performed -= instance.OnCamera;
            @Camera.canceled -= instance.OnCamera;
            @FireCannon.started -= instance.OnFireCannon;
            @FireCannon.performed -= instance.OnFireCannon;
            @FireCannon.canceled -= instance.OnFireCannon;
            @FireMissile.started -= instance.OnFireMissile;
            @FireMissile.performed -= instance.OnFireMissile;
            @FireMissile.canceled -= instance.OnFireMissile;
        }

        public void RemoveCallbacks(IAircraftActions instance)
        {
            if (m_Wrapper.m_AircraftActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAircraftActions instance)
        {
            foreach (var item in m_Wrapper.m_AircraftActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AircraftActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AircraftActions @Aircraft => new AircraftActions(this);
    public interface IAircraftActions
    {
        void OnThrottle(InputAction.CallbackContext context);
        void OnPitch(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
        void OnYaw(InputAction.CallbackContext context);
        void OnCamera(InputAction.CallbackContext context);
        void OnFireCannon(InputAction.CallbackContext context);
        void OnFireMissile(InputAction.CallbackContext context);
    }
}
